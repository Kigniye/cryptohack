


**********************************
Here's the Gram-Schmidt algorithm implemented without using numpy, with all operations (dot product, projection, subtraction) calculated explicitly:

# Define the given vectors
v1 = [4, 1, 3, -1]
v2 = [2, 1, -3, 4]
v3 = [1, 0, -2, 7]
v4 = [6, 2, 9, -5]

# Function to calculate the dot product
def dot_product(v, w):
    return sum(vi * wi for vi, wi in zip(v, w))

# Function to calculate the projection of v onto u
def projection(v, u):
    scale = dot_product(v, u) / dot_product(u, u)
    return [scale * ui for ui in u]

# Function to subtract two vectors
def vector_subtraction(v, w):
    return [vi - wi for vi, wi in zip(v, w)]

# Step 1: Compute u1
u1 = v1

# Step 2: Compute u2
proj_v2_u1 = projection(v2, u1)
u2 = vector_subtraction(v2, proj_v2_u1)

# Step 3: Compute u3
proj_v3_u1 = projection(v3, u1)
proj_v3_u2 = projection(v3, u2)
u3 = vector_subtraction(vector_subtraction(v3, proj_v3_u1), proj_v3_u2)

# Step 4: Compute u4
proj_v4_u1 = projection(v4, u1)
proj_v4_u2 = projection(v4, u2)
proj_v4_u3 = projection(v4, u3)
u4 = vector_subtraction(vector_subtraction(vector_subtraction(v4, proj_v4_u1), proj_v4_u2), proj_v4_u3)

# Extract the second component of u4
second_component_u4 = u4[1]

# Round to 5 significant figures
result = round(second_component_u4, 5)

print(result)
